# autoconf input for Objective Caml programs
# by Jean-Christophe Filliâtre, from a first script by Georges Mariano
# adapted by Julien Narboux for GeoProof
#
# the script generated by autoconf from this input will set the following
# variables:
#   OCAMLC        "ocamlc" if present in the path, or a failure
#                 or "ocamlc.opt" if present with same version number as ocamlc
#   OCAMLOPT      "ocamlopt" (or "ocamlopt.opt" if present), or "no"
#   OCAMLBEST     either "byte" if no native compiler was found, 
#                 or "opt" otherwise
#   OCAMLDEP      "ocamldep"
#   OCAMLLEX      "ocamllex"
#   OCAMLYACC     "ocamlyac"
#   OCAMLLIB      the path to the ocaml standard library
#   OCAMLVERSION  the ocaml version number

# check for one particular file of the sources 
# ADAPT THE FOLLOWING LINE TO YOUR SOURCES!
AC_INIT(float_precision.ml)

VERSION=0.5beta
DATE=`date -I`

echo "This is GeoProof Version $VERSION."
echo ""

# Check for Ocaml compilers

# we first look for ocamlc in the path; if not present, we fail
AC_CHECK_PROG(OCAMLC,ocamlc,ocamlc,no)
if test "$OCAMLC" = no ; then
	AC_MSG_ERROR(Cannot find ocamlc.)
fi

# we extract Ocaml version number and library path
OCAMLVERSION=`$OCAMLC -v | sed -n -e 's|.*version* *\(.*\)$|\1|p' `

case $OCAMLVERSION in
  1.*|2.*|3.00|3.01|3.02|3.03|3.03|3.04|3.05|3.06|3.07)
	echo "Your version of Objective-Caml is $CAMLVERSION."
	echo "You need Objective-Caml 3.08 or later !"
	echo "Configuration script failed!"
	exit 1;;
 ?*)	echo "You have Objective-Caml $OCAMLVERSION. Good!";;
esac
OCAMLLIB=`$OCAMLC -where`
echo "ocaml library path is $OCAMLLIB"


# then we look for ocamlopt; if not present, we issue a warning
# if the version is not the same, we also discard it
# we set OCAMLBEST to "opt" or "byte", whether ocamlopt is available or not
AC_CHECK_PROG(OCAMLOPT,ocamlopt,ocamlopt,no)
OCAMLBEST=byte
if test "$OCAMLOPT" = no ; then
	AC_MSG_WARN(Cannot find ocamlopt; bytecode compilation only.)
else
	AC_MSG_CHECKING(ocamlopt version)
	TMPVERSION=`$OCAMLOPT -v | sed -n -e 's|.*version* *\(.*\)$|\1|p' `
	if test "$TMPVERSION" != $OCAMLVERSION ; then
	    AC_MSG_RESULT(differs from ocamlc; ocamlopt discarded.)
	    OCAMLOPT=no
	else
	    AC_MSG_RESULT(ok)
	    OCAMLBEST=opt
	fi
fi

# definition of the libraries ext.
if test "$OCAMLBEST" = "byte"; then
  OCAMLLIB_EXT=cma
else
  OCAMLLIB_EXT=cmxa
fi

# checking for ocamlc.opt
AC_CHECK_PROG(OCAMLCDOTOPT,ocamlc.opt,ocamlc.opt,no)
if test "$OCAMLCDOTOPT" != no ; then
	AC_MSG_CHECKING(ocamlc.opt version)
	TMPVERSION=`$OCAMLCDOTOPT -v | sed -n -e 's|.*version* *\(.*\)$|\1|p' `
	if test "$TMPVERSION" != $OCAMLVERSION ; then
	    AC_MSG_RESULT(differs from ocamlc; ocamlc.opt discarded.)
	else
	    AC_MSG_RESULT(ok)
	    OCAMLC=$OCAMLCDOTOPT
	fi
fi

# checking for ocamlopt.opt
if test "$OCAMLOPT" != no ; then
    AC_CHECK_PROG(OCAMLOPTDOTOPT,ocamlopt.opt,ocamlopt.opt,no)
    if test "$OCAMLOPTDOTOPT" != no ; then
	AC_MSG_CHECKING(ocamlopt.opt version)
	TMPVER=`$OCAMLOPTDOTOPT -v | sed -n -e 's|.*version* *\(.*\)$|\1|p' `
	if test "$TMPVER" != $OCAMLVERSION ; then
	    AC_MSG_RESULT(differs from ocamlc; ocamlopt.opt discarded.)
	else
	    AC_MSG_RESULT(ok)
	    OCAMLOPT=$OCAMLOPTDOTOPT
	fi
    fi
fi

# ocamldep, ocamllex and ocamlyacc should also be present in the path
AC_CHECK_PROG(OCAMLDEP,ocamldep,ocamldep,no)
if test "$OCAMLDEP" = no ; then
	AC_MSG_ERROR(Cannot find ocamldep.)
fi

AC_CHECK_PROG(OCAMLLEX,ocamllex,ocamllex,no)
if test "$OCAMLLEX" = no ; then
	AC_MSG_ERROR(Cannot find ocamllex.)
fi

AC_CHECK_PROG(OCAMLYACC,ocamlyacc,ocamlyacc,no)
if test "$OCAMLYACC" = no ; then
	AC_MSG_ERROR(Cannot find ocamlyacc.)
fi


AC_ARG_ENABLE(creal, [  --disable-creal: disable the use of the creal library to perform arbitrary precision computations], [CREAL="$enableval"])
    
#REQUIRED_LABLGTK=2.4.0 TODO
REQUIRED_GTK=2.4.0
REQUIRED_RSVG=2.4.0
LABLGTK_NAME=lablgtk2

PKG_GTK=gtk+-2.0
AC_MSG_CHECKING(for GTK+ - version >= $REQUIRED_GTK)
if pkg-config --atleast-version $REQUIRED_GTK $PKG_GTK; then
        AC_MSG_RESULT(yes)
        PKG_RSVG=librsvg-2.0
        AC_MSG_CHECKING(for librsvg - version >= $REQUIRED_RSVG)
        if pkg-config --atleast-version $REQUIRED_RSVG $PKG_RSVG; then
          GTK_CONFIG="pkg-config $PKG_GTK $PKG_RSVG"
          AC_MSG_RESULT(yes)
	else
	   AC_MSG_RESULT(no)
	fi
else
	AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING(for $LABLGTK_NAME with lablrsvg support.)
if test -f "$OCAMLLIB/$LABLGTK_NAME/lablgtk.$OCAMLLIB_EXT"; then
    if test -f "$OCAMLLIB/$LABLGTK_NAME/lablrsvg.$OCAMLLIB_EXT"; then
         AC_MSG_RESULT(yes)
       else
         AC_MSG_RESULT(no)
         if test -f "$OCAMLLIB/$LABLGTK_NAME/lablrsvg.cma"; then
           echo "---------------------------------------------------------"
           echo "lablrsvg is not installed properly.                      "
           echo "The native code version is missing.                      "
           echo "You probably forgot to call 'make opt' before            "
	   echo "'make install' while installing $LABLGTK_NAME."
           echo "---------------------------------------------------------"
         else
           echo "---------------------------------------------------------"
           echo "lablrsvg is not installed.                               "
           echo "librsvg may not be installed when you compiled $LABLGTK_NAME."
           echo "---------------------------------------------------------"
        fi
    fi
else
   AC_MSG_RESULT(no)    
   if test -f "$OCAMLLIB/$LABLGTK_NAME/lablgtk.cma"; then
     echo "-------------------------------------------------------------"
     echo "$LABLGTK_NAME is not installed properly."
     echo "The native code version is missing.                      "
     echo "probably you forgot to call 'make opt' before 'make install'."
     echo "-------------------------------------------------------------"
   else
    echo "-------------------------------------------------------------"
    echo "$LABLGTK_NAME is not installed."
    echo "-------------------------------------------------------------"
   fi
fi

AC_MSG_CHECKING(for Xml-light)
if test -f "$OCAMLLIB/xml-light.$OCAMLLIB_EXT"; then
  AC_MSG_RESULT(yes)
else
  AC_MSG_RESULT(no)
fi

if test "$CREAL" = "no"; then
  CREAL=false
  COMPUTATION_MODULE="Float_precision"
  COMPUTATION_FILE="float_precision.ml"	
  CREALLIB=
  echo "---------------------------------------------------------"
  echo "Creal (arbitrary precision) disabled."
  echo "---------------------------------------------------------"
else	
  CREAL=true
fi

if test "$CREAL" = "true"; then
  AC_MSG_CHECKING(for C-Real)
  if test -f "$OCAMLLIB/creal/creal.$OCAMLLIB_EXT"; then
    COMPUTATION_MODULE="Arbitrary_precision" 
    COMPUTATION_FILE="arbitrary_precision.ml"
    CREALLIB=creal
    AC_MSG_RESULT(yes)
    echo "---------------------------------------------------------"
    echo "Warning : We need Creal Version 0.6."
    echo "But we did not check the version."
    echo "Make sure you have Creal 0.6."
    echo "---------------------------------------------------------"
  else
    AC_MSG_RESULT(no)
    echo ""
    echo "---------------------------------------------------------"
    echo "Creal is not installed."
    echo "Arbitrary precision computation is disabled."
    echo "---------------------------------------------------------"
    CREALLIB=
    COMPUTATION_MODULE="Float_precision"
    COMPUTATION_FILE="float_precision.ml"
  fi
fi

# substitutions to perform
AC_SUBST(OCAMLC)
AC_SUBST(OCAMLOPT)
AC_SUBST(OCAMLDEP)
AC_SUBST(OCAMLLEX)
AC_SUBST(OCAMLYACC)
AC_SUBST(OCAMLBEST)
AC_SUBST(OCAMLVERSION)
AC_SUBST(OCAMLLIB)
AC_SUBST(VERSION)
AC_SUBST(DATE)
AC_SUBST(COMPUTATION_MODULE)
AC_SUBST(COMPUTATION_FILE)
AC_SUBST(CREALLIB)

# Finally create the Makefile from Makefile.in
AC_OUTPUT(
	Makefile 
	autoconf.ml 
	geometric_functions.ml 
	distrib/rpms/geoproof.spec 
	distrib/windows/geoproof.nsi
	)
chmod a-w Makefile
